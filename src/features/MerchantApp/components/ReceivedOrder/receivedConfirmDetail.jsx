import React, { useEffect, useState } from "react";
import "./styleDetail.scss";
import { FaPhoneAlt } from "react-icons/fa";
import { BsChevronLeft } from "react-icons/bs";
import { RiFileCopyLine } from "react-icons/ri";
import ava1 from "assets/image/avartar/ava1.jpg";
import { useHistory, useLocation } from "react-router-dom";
import {
  validatePrice,
  sumQuantity,
  sumTotal,
  datetimeFromTimestamp,
} from "func";
import socket from "socket-io";
import taixe1 from "assets/image/avartar/taixe1.jpg";
import TimeInput from "react-input-time";
import { toast, ToastContainer } from "react-toastify";
import userAPi from "api/userApi";

function ReceivedConfirmDetail() {
  const history = useHistory();
  const location = useLocation();
  const orderDetail = location.state.orderDetail;
  const [historyOrder, setHistoryOrder] = useState([]);
  const percent =
    historyOrder.filter((od) => od.status === "complete").length /
      historyOrder.length || 0;
  const lastOrder = historyOrder.slice(-1).pop() || {};

  const [timePartnerGetFood, setTimePartnerGetFood] = useState(
    orderDetail.timeOrder
  );
  const hourWarning = () =>
    toast.error(
      <div>
        <span style={{ fontSize: "2.5rem" }}>ü§ö</span>Gi·ªù d·ª± ki·∫øn giao kh√¥ng h·ª£p
        l·ªá
      </div>
    );

  useEffect(() => {
    const fetchPrestige = async () => {
      const res = await userAPi.getPrestige(orderDetail.userOrderId._id);
      if (!res.status || res.status == 200) {
        setHistoryOrder(res);
      }
    };
    fetchPrestige();
  }, [orderDetail]);

  const onTimeChangeHandle = (val) => {
    let hour = new Date().setHours(parseInt(val.split(":")[0]));
    let time = new Date(hour).setMinutes(parseInt(val.split(":")[1]));
    console.log("new", time, val.split(":"));
    setTimePartnerGetFood(time);
  };

  const addReceivedPrepare = async () => {
    if (!isNaN(parseFloat(timePartnerGetFood))) {
      socket.emit("approveOrder", {
        order_id: orderDetail._id,
        timePartnerGetFood: timePartnerGetFood,
      });
      history.goBack();
    } else {
      hourWarning();
    }
  };

  return (
    <div className="received-confirm-detail">
      <ToastContainer />
      <div className="detail-head">
        <div
          onClick={() => {
            history.goBack();
          }}
          className="detail-head__link"
        >
          <BsChevronLeft className="detail-head__icon" />
          <span>ƒê√£ nh·∫≠n</span>
        </div>
      </div>

      <div className="detail-note">
        <span>Ghi ch√∫ kh√°ch h√†ng:</span>
        <span>{orderDetail.note}</span>
      </div>

      <div className="detail-partner">
        <div
          className="partner-avatar"
          style={{ backgroundImage: `url(${ava1})` }}
        ></div>
        <div className="partner-info">
          <span>{orderDetail.userOrderId.info.name}</span>
          <span>
            ƒê√£ ƒë·∫∑t: {historyOrder.length} ƒë∆°n | T·ªâ l·ªá th√†nh c√¥ng:
            {percent.toFixed(2)}% | ƒê∆°n g·∫ßn nh·∫•t:
            {lastOrder.status && lastOrder.status === "complete"
              ? "Th√†nh c√¥ng"
              : "Th·∫•t b·∫°i" || ""}
          </span>
        </div>
        <div className="partner-action">
          <FaPhoneAlt
            className="icon"
            onClick={() =>
              window.open("tel:" + orderDetail.userOrderId.info.phone)
            }
          />
        </div>
      </div>

      {orderDetail.deliverId ? (
        <div className="detail-partner">
          <div
            className="partner-avatar"
            style={{ backgroundImage: `url(${orderDetail.deliverId.avt})` }}
          >
            <img src={taixe1} alt="" />
          </div>
          <div className="partner-info">
            <span>{orderDetail.deliverId.name}</span>
            <span>{orderDetail.deliverId.phone}</span>
          </div>
          <div style={{ marginLeft: "8rem" }}>
            <span>D·ª± ki·∫øn giao cho Shipper </span>

            <TimeInput
              className="input-time"
              initialTime={
                `0${new Date(
                  parseInt(timePartnerGetFood) + 10 * 60000
                ).getHours()}`.slice(-2) +
                ":" +
                `0${new Date(
                  parseInt(timePartnerGetFood) + 10 * 60000
                ).getMinutes()}`.slice(-2)
              }
              onChange={(e) => onTimeChangeHandle(e.target.value)}
            />
          </div>
          <div className="partner-action">
            <FaPhoneAlt
              className="icon"
              onClick={() => window.open("tel:" + orderDetail.deliverId.phone)}
            />
          </div>
        </div>
      ) : (
        ""
      )}

      <div className="detail-dishes">
        <div className="detail-dishes__list">
          {orderDetail.detail.foods.map((food, index) => (
            <div className="detail-dishes__item" key={index}>
              <div className="item-quantity">{food.quantity} x</div>
              <div className="item-name">{food.name}</div>
              <div className="item-total">{validatePrice(food.total)}</div>
            </div>
          ))}
        </div>

        <div className="detail-dishes__count">
          <div className="count-cost">
            <span>T·ªïng ti·ªÅn m√≥n (gi√° g·ªëc)</span>
            <span>{validatePrice(orderDetail.detail.total)} ƒë</span>
          </div>
          {/* <div className="count-discount">
            <span>Gi·∫£m gi√°</span>
            <span>{validatePrice(orderDetail.detail.discount)}</span>
          </div> */}
          <div className="count-commission">
            <span>Ti·ªÅn hoa h·ªìng (10%)</span>
            <span>
              {validatePrice(orderDetail.detail.total * (10 / 100))} ƒë
            </span>
          </div>
          <div className="count-total">
            <span>
              T·ªïng ti·ªÅn ({orderDetail.detail.foods.reduce(sumQuantity, 0)} m√≥n)
            </span>
            <span>
              {validatePrice(
                orderDetail.detail.total - orderDetail.detail.total * (10 / 100)
              )}{" "}
              ƒë
            </span>
          </div>
        </div>
      </div>

      <div className="detail-bot">
        <div className="detail-bot__id">
          <span>M√£ ƒê∆°n H√†ng</span>
          <span>
            {orderDetail.id} <RiFileCopyLine />
          </span>
        </div>
        <div className="detail-bot__time">
          <span>Th·ªùi gian ƒë·∫∑t ƒë∆°n</span>
          <span>
            H√¥m nay {datetimeFromTimestamp(parseInt(orderDetail.timeOrder))}
          </span>
        </div>
        <div className="detail-bot__space">
          <span>Kho·∫£ng c√°ch</span>
          <span>{orderDetail.distance} km</span>
        </div>
      </div>

      <div className="detail-action">
        <button
          className="detail-action__btn"
          onClick={() => {
            addReceivedPrepare();
          }}
        >
          Qu√°n x√°c nh·∫≠n
        </button>
      </div>
    </div>
  );
}

export default ReceivedConfirmDetail;
